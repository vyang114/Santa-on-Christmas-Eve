package street;

import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.CubicCurve2D;
import java.awt.geom.QuadCurve2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import main.Panel;
import others.Text;
import others.Util;


public class StreetScene {

	
	private Buildings buildings;
	private Trees trees;
	private Text txt;
	
	private Smoke smoke;
	
	private ArrayList <Snow> snow = new ArrayList<Snow>();
	private int snowNum = 150;
	
	private Color mountainColor = new Color(224, 234, 226);
//	private Color skyColor = new Color(191, 217, 225);
	
	private int r = 191;
	private int g = 217;
	private int b = 225;
	
	private Rectangle2D.Double streetBg;
	private CubicCurve2D.Double ground;

	public int nightCountdown = 100;
	
	
	public StreetScene(){
		super();
		
		buildings = new Buildings();
		trees = new Trees();
		txt = new Text();
		smoke = new Smoke();
		
		streetBg = new Rectangle2D.Double();
		ground = new CubicCurve2D.Double();	
		
		for (int i = 0; i < snowNum; i++){
			snow.add(new Snow (Util.random(2, 6.5)));
		}

	}
	

	public void setStreetAttribute(){
		
		streetBg.setFrame(Panel.WIN_X, Panel.WIN_Y, Panel.WIN_W, Panel.WIN_H);
		ground.setCurve(Panel.WIN_X - 180, Panel.WIN_H, Panel.WIN_X/2 + 40, Panel.WIN_H - 450, Panel.WIN_X + 2000, Panel.WIN_H, Panel.WIN_W + 200, Panel.WIN_H);
		
	}
	

	
	public void drawStreetBackground(Graphics2D g2){
		
		System.out.println(nightCountdown);

		setStreetAttribute();
		
		g2.setColor(new Color(r, g, b));
		g2.fill(streetBg);
		
		drawMountain(g2);
		
		
		AffineTransform at3 = g2.getTransform();
		g2.translate(320, 290);
		smoke.drawCloud(g2);
		g2.setTransform(at3);
		
		buildings.drawMe(g2);
		
		g2.setColor(Color.white);
		g2.fill(ground);
		
		trees.drawMe(g2);
		
		
		try {
			for(int i=0; i< snow.size(); i++) {
				snow.get(i).drawMe(g2);
			}
			} catch (IndexOutOfBoundsException e) {
			System.out.println("Hey, youâ€™ve gone beyond the limit of the ArrayList!");
			} catch (NullPointerException e) {
			System.out.println("You might have forgotten to instantiate the array or its elements!");
			} catch (Exception e) {
			System.out.println("Hmmm, something weird happened!");
			e.printStackTrace(); // print out the error message generated by the system
			}
		
		
		night(g2);	
		
	}
	
	
	
	private void drawMountain(Graphics2D g2){
		
		g2.setColor(mountainColor);
		g2.fillPolygon(new int[] {Panel.WIN_X - 40, Panel.WIN_X + 150, Panel.WIN_X + 370}, 
					   new int[] {Panel.WIN_H - 120, Panel.WIN_H - 450, Panel.WIN_H - 160}, 3);
		
		g2.fillPolygon(new int[] {Panel.WIN_X + 220, Panel.WIN_X + 430, Panel.WIN_X + 580}, 
				   	   new int[] {Panel.WIN_H - 120, Panel.WIN_H - 550, Panel.WIN_H - 160}, 3);
		
		g2.fillPolygon(new int[] {Panel.WIN_X + 360, Panel.WIN_X + 670, Panel.WIN_X + 950}, 
				       new int[] {Panel.WIN_H - 120, Panel.WIN_H - 440, Panel.WIN_H - 160}, 3);
		
		g2.fillPolygon(new int[] {Panel.WIN_X + 830, Panel.WIN_X + 950, Panel.WIN_W + 40}, 
				       new int[] {Panel.WIN_H - 120, Panel.WIN_H - 410, Panel.WIN_H - 160}, 3);
		
	}
	
	
	public void snowfall (){
		for (int i = 0; i < snow.size(); i++){
			snow.get(i).move();
			
			if (snow.get(i).snowY > Panel.WIN_H - snow.get(i).diameter){
				destroySnow(snow.get(i));
				snow.add(new Snow (Util.random(2, 6.5)));
			}
		}
	}
	
	
	private void destroySnow (Snow s){
		snow.remove(s);
	}
	
	
	
	private void night (Graphics2D g2){
		
		if (nightCountdown > 0) {
			nightCountdown--;
			txt.streetText(g2);
		}
		
		if (nightCountdown <= 400 && r != 0 && g != 0 && b!= 0){
			r--;
			g--;
			b--;	
		}
		
		if (nightCountdown == 0){
			txt.selectHouseText(g2);
		}
		
		
		
		if (Panel.mouseInHouse1){
			g2.setColor(Color.gray);
			g2.fillPolygon(new int[] {(int) (buildings.buildingX + 30), (int) (buildings.buildingX + buildings.buildingW/2), (int) (buildings.buildingX + buildings.buildingW - 30)}, 
					   new int[] {buildings.buildingY - 120 , buildings.buildingY - 80, buildings.buildingY - 120}, 3);
		}else if (Panel.mouseInHouse2){
			g2.setColor(Color.gray);
			g2.fillPolygon(new int[] {(int) (buildings.buildingX + 145), (int) (buildings.buildingX + buildings.buildingW/2 + 115), (int) (buildings.buildingX + buildings.buildingW + 85)}, 
					   new int[] {buildings.buildingY - 190 , buildings.buildingY - 150, buildings.buildingY - 190}, 3);
			
		}
		
	}	
	
}
